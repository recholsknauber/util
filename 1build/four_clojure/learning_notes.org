* Leiningen Basics
** Create a new project with "lein new app $NAME"
** project.clj lists a description, URL, dependencies etc.
** Clojars is to Clojure what NPM is to JS.
** Leiningen also uses Maven Central, which is the wider JVM community.
* Learn Clojure: Syntax Notes
** nil is NULL
** Symbols that start with a leading colon " : " are keywords
** 4 collection types with literal syntax
*** '(1 2 3) list
*** [1 2 3] vector
*** #{1 2 3} set
*** {:a 1, :b 2} map
** Java Evaluation is Source Code (characters) --> Compiler (to bytecode) --> JVM --> Effect!
** Clojure Evaluation is Source Code (characters) --> Reader (to data structures) --> Compiler (to bytecode) --> JVM --> Effect!
** REPL = Read-Eval-Print-Loop
*** Reads an expression to produce Clojure data.
*** Evaluate the date to yield a result.
*** Print the result by converting from data back to characters.
*** Loop back to the beginning.
** In the REPL, "*1" signifies the last result, "*2" the result 2 expressions ago, etc.
** The doc function displays documentation (and returns nil as the result)
*** (doc +) will display the documentation for +
** find-doc returns a search that includes the docstrings of functions themselves
** dir will show a full list of functions in a namespace
** source to see the underlying source
** def is used to save a piece of data for later
*** (def x 88) sets the symbol "x" to 88
** println prints with newline, print without
** Test Problems
#+BEGIN_SRC clojure :results output
(println (+ 1 2))
#+END_SRC
#+RESULTS:
: 3
#+BEGIN_SRC clojure :results output
(println (+ 7654 1234))
#+END_SRC
#+RESULTS:
: 8888
#+BEGIN_SRC clojure :results output
  (println (/ (+ (* 3 4) 7 5) 10))
#+END_SRC
#+RESULTS:
: 12/5
#+BEGIN_SRC clojure :results output
  (require '[clojure.repl :refer :all])
  (println (doc mod))
#+END_SRC
#+RESULTS:
: -------------------------
: clojure.core/mod
: ([num div])
:   Modulus of num and div. Truncates toward negative infinity.
: nil
#+BEGIN_SRC clojure
  (println (find-doc "stack"))
#+END_SRC
#+RESULTS:
: nil
* Learn Clojure: Functions Notes
** Named Functions
*** Functions defined with defn
#+BEGIN_SRC clojure :results output
  (defn love [thing] (str "I love " thing "."))
  (println (love "life"))
#+END_SRC
#+RESULTS:
: I love life.
** Multi-Arity Functions
*** Functions defined with different #'s of parameters (different "arity")
#+BEGIN_SRC clojure :results output
  (defn love
    ([] (str "I love everything!"))
    ([thing] (str "I love " thing "."))
    )
  (println (love))
#+END_SRC
#+RESULTS:
: I love everything!
** Variadic Functions
*** Functions with a variable number of parameters.
*** The variable parameters are collected in a list.
#+BEGIN_SRC clojure :results output
  (defn love [thing & magnitude]
    (println (str "I love " thing " " magnitude ".")))
  (println (love "Portland" "like a fat kid" "loves cake"))
#+END_SRC
#+RESULTS:
: I love Portland ("like a fat kid" "loves cake").
: nil
** Anonymous Functions
*** Created with fn (cannot be refered to later)
#+BEGIN_SRC clojure :results output
  ((fn [thing] (println (str "I love " thing "."))) "Olivia")
#+END_SRC
#+RESULTS:
: I love Olivia.
** Shorter Anonymous Functions
*** Created with #()
*** % is used for a single parameter
*** %1, %2, %3 etc are used for multiple params
*** %& for variadic params
*** Nesting anonymous functions is not allowed
#+BEGIN_SRC clojure :results output
  (println (#(+ 6 %) 9))
  (println (#(+ 6 %1 %2) 9 8 ))
#+END_SRC
#+RESULTS:
: 15
: 23
** Apply
*** For when arguments are stored in a sequence.
*** At least the last argument MUST be a sequence.
#+BEGIN_SRC clojure :results output
  (defn love [thing & magnitude]
      (println (str "I love " thing " " magnitude ".")))
  (def morethwords '("more than words " "can " "say"))
  (println (apply love "Olivia" morethwords))
#+END_SRC
#+RESULTS:
: I love Olivia ("more than words " "can " "say").
: nil
** Lets
*** Binding symbols in a local scope (taking precedence over the outer context).
#+BEGIN_SRC clojure :results output
  (println
  (let [x 1
	y 2]
    (+ x y))
  )
#+END_SRC
#+RESULTS:
: 3
* Learn Clojure: Function Test Problems
** 1) Define a function greet that takes no arguments and prints "Hello". Replace the with the implementation: (defn greet [] )
#+BEGIN_SRC clojure :results output
  (defn greet [] (println "Hello."))
  (greet)
#+END_SRC
#+RESULTS:
: Hello.
** 2) Redefine greet using def, first with the fn special form and then with the #() reader macro.
#+BEGIN_SRC clojure :results output
  (def greet (fn [] (println "Hello.")))
  (greet)
#+END_SRC
#+RESULTS:
: Hello.
** 3) Define a function greeting which:
*** Given no arguments, returns "Hello, World!"
*** Given one argument x, returns "Hello, x!"
*** Given two arguments x and y, returns "x, y!"
#+BEGIN_SRC clojure :results output
  (defn greet
    ([] (println "Hello, World!"))
    ([x] (println "Hello, " (str x "!")))
    ([x y] (println (str x ", " y "!")))
    )
  (greet "Liam")
#+END_SRC

#+RESULTS:
: Hello,  Liam!
** 4) Define a function do-nothing which takes a single argument x and returns it, unchanged.
#+BEGIN_SRC clojure :results output
  (defn do-nothing [x] x)
  (println (do-nothing 2))
#+END_SRC
#+RESULTS:
: 2
** 5) Define a function always-thing which takes any number of arguments, ignores all of them, and returns the number 100.
#+BEGIN_SRC clojure :results output
  (defn always-thing [& x] 100)
  (println (always-thing))
#+END_SRC
#+RESULTS:
: 100
** 6) Define a function make-thingy which takes a single argument x. It should return another function, which takes any number of arguments and always returns x.
#+BEGIN_SRC clojure :results output
  (defn make-thingy [x] (fn [& y] x))
  (println (make-thingy 55))
#+END_SRC
#+RESULTS:
: #function[four-clojure.core/make-thingy/fn--7992]
** 7) Define a function triplicate which takes another function and calls it three times, without any arguments.
#+BEGIN_SRC clojure :results output
(defn triplicate [f] (f) (f) (f))
#+END_SRC
** 8) Define a function opposite which takes a single argument f. It should return another function which takes any number of arguments, applies f on them, and then calls not on the result. The not function in Clojure does logical negation.
#+BEGIN_SRC clojure :results output
  (defn opposite [f]
    (fn [& args] (not (apply f args))))
#+END_SRC
#+RESULTS:

* Learn Clojure: Sequential Collections Notes
** 4 collection types: vectors, lists, sets, and maps.
*** Vectors and lists are ordered
** Vectors: Ordered, Immutable
*** [1 2 3]
*** Changing a vector creates a new instance--the original variable will remain unchanged.
*** Use "get" to retrieve an element by index
#+BEGIN_SRC clojure :results output
  (println
   (get ["Olivia" "Liam" "Ryan"] 0)
   )
#+END_SRC
#+RESULTS:
: Olivia
*** Count
#+BEGIN_SRC clojure :results output
  (println
   (count [1 2 3 4 5 6 7])
   )
#+END_SRC
#+RESULTS:
: 7
*** Vector
**** In addition to using [ ], you can create Clojure vectors with
#+BEGIN_SRC clojure :results output
  (println
   (vector 1 2 3)
   )
#+END_SRC
#+RESULTS:
: [1 2 3]
*** Adding elements with conj (conjoin)
#+BEGIN_SRC clojure :results output
  (println
   (conj ["Olivia" "Liam" "Ryan"] "Claudia" "Carolyn" "Scott" "Ellycia" "Steve" "Taylor" "Anthony" "DJ")
   )
#+END_SRC
#+RESULTS:
: [Olivia Liam Ryan Claudia Carolyn Scott Ellycia Steve Taylor Anthony DJ]
*** Immutability (v remains unchanged after conj)
#+BEGIN_SRC clojure :results output
  (def v [1 2 3])
  (conj v 4 5 6)
  (println (nth v 1))
#+END_SRC
#+RESULTS:
: [1 2 3]
** Lists: Ordered, Immutable
*** Sequential (ordered) linked lists that add new elements at the head (instead of the tail like vectors).
*** Constructing
**** Because lists are evaluating by invoking the first element as a function, must be quoted
#+BEGIN_SRC clojure :results output
  (def rando '(11 "happy" :baby 14))
  (println (first rando))
  (println (rest rando))
#+END_SRC
#+RESULTS:
: 11
: (happy :baby 14)
*** Conj adds items at the front
#+BEGIN_SRC clojure :results output
  (def rando '(11 "happy" :baby 14))
  (println
   (conj rando :dharma)
   )
#+END_SRC
#+RESULTS:
: (:dharma 11 happy :baby 14)
*** Peek and pop
#+BEGIN_SRC clojure :results output
  (def rando '(11 "happy" :baby 14))
  (println (peek rando))
  (println (pop rando))
  (println (conj rando :dharma))
  (println rando)
#+END_SRC
#+RESULTS:
: 11
: (happy :baby 14)
: (:dharma 11 happy :baby 14)
: (11 happy :baby 14)
** Sets: Unordered, Hashed, No duplicates
*** Sets created with hashtag and brackets
#+BEGIN_SRC clojure :results output
  (def peeps #{"Olivia", "Robert", "Allan"})
  (println peeps)
#+END_SRC
#+RESULTS:
: #{Allan Robert Olivia}
*** Disj (disjoin--removes elements)
#+BEGIN_SRC clojure :results output
  (def peeps #{"Olivia", "Robert", "Allan"})
  (println (disj peeps "Robert" "Allan"))
#+END_SRC
#+RESULTS:
: #{Olivia}
*** Contains?
#+BEGIN_SRC clojure :results output
  (def peeps #{"Olivia", "Robert", "Allan"})
  (println (contains? peeps "Robert"))
#+END_SRC
#+RESULTS:
: true
*** Into (putting collections together)
#+BEGIN_SRC clojure :results output
  (def peeps #{"Olivia", "Robert", "Allan"})
  (def fam #{"Ellycia" "Steve" "Taylor"})
  (println (into peeps fam))
#+END_SRC
#+RESULTS:
: #{Allan Robert Steve Olivia Ellycia Taylor}

** Maps
*** Same as a dictionary in python (keys to values)
#+BEGIN_SRC clojure :results output
  (def relationships {"Olivia" "Fiance"
		      "Robert" "Roommate"
		      "Allan" "Friend of Friend"})
  (println relationships)
#+END_SRC
#+RESULTS:
: {Olivia Fiance, Robert Roommate, Allan Friend of Friend}
*** Adding new values
#+BEGIN_SRC clojure :results output
  (def relationships {"Olivia" "Fiance"
		      "Robert" "Roommate"
		      "Allan" "Friend of Friend"})
  (println (assoc relationships "Hogen" "Teacher"))
#+END_SRC
#+RESULTS:
: {Olivia Fiance, Robert Roommate, Allan Friend of Friend, Hogen Teacher}
*** Dissoc to removes
*** Getting a key (can use get, or the map as a function)
#+BEGIN_SRC clojure :results output
  (def relationships {"Olivia" "Fiance"
		      "Robert" "Roommate"
		      "Allan" "Friend of Friend"})
  (println (relationships "Olivia"))
#+END_SRC
#+RESULTS:
: Fiance
*** Getting a key and specifying a default if not found
#+BEGIN_SRC clojure :results output
  (def relationships {"Olivia" "Fiance"
		      "Robert" "Roommate"
		      "Allan" "Friend of Friend"})
  (println (relationships "Hogen" 0))
#+END_SRC
#+RESULTS:
: 0
*** Contains? like sets
*** Find
#+BEGIN_SRC clojure :results output
  (def relationships {"Olivia" "Fiance"
		      "Robert" "Roommate"
		      "Allan" "Friend of Friend"})
  (println (find relationships "Olivia"))
#+END_SRC
#+RESULTS:
: [Olivia Fiance]
*** Keys or Vals to get keys and vals
*** Zipmap to put two sets together (not ordered), as keys and maps respectively
#+BEGIN_SRC clojure :results output
  (def peeps #{"Olivia" "Robert" "Allan"})
  (def titles #{"Fiance" "Roommate" "Friend of friend"})
  (def relationships (zipmap peeps titles))
  (println relationships)
#+END_SRC
#+RESULTS:
: {Allan Fiance, Robert Roommate, Olivia Friend of friend}
*** Merge to combine any number of maps
**** If maps contain the same key, the rightmost wins.
**** Can use merge-with to apply a function when there is a conflict.
*** Sorted maps
#+BEGIN_SRC clojure :results output
  (def peeps #{"Olivia" "Robert" "Allan"})
  (def titles #{"Fiance" "Roommate" "Friend of friend"})
  (def relationships (zipmap peeps titles))
  (println relationships)
#+END_SRC
#+RESULTS:
: {Allan Fiance, Robert Roommate, Olivia Friend of friend}
*** Sorted-map like sorted-sets. Default sorting function is compare.
*** Domain information
#+BEGIN_SRC clojure :results output
  (def person
    {:first-name "Olivia"
     :last-name "Echols"
     :age 99
     :occupation "Designer"})
  (println (person :occupation))
  (println (:occupation person))
#+END_SRC
#+RESULTS:
: Designer
: Designer
*** Updating with assoc (and remove with dissoc)
#+BEGIN_SRC clojure :results output
  (def person
    {:first-name "Olivia"
     :last-name "Echols"
     :age 99
     :occupation "Designer"})
  (println (assoc person :occupation "Senior Designer"))
#+END_SRC
#+RESULTS:
: {:first-name Olivia, :last-name Echols, :age 99, :occupation Senior Designer}
*** Nested entities
#+BEGIN_SRC clojure :results output
  (def person
    {:first-name "Olivia"
     :last-name "Echols"
     :address {:street "123 Kickass Ln"
	       :city "Hipster Town"
	       :state "Orygun"}
     :age 99
     :occupation "Designer"})
  (println (assoc person :occupation "Senior Designer"))
#+END_SRC
#+RESULTS:
: {:first-name Olivia, :last-name Echols, :address {:street 123 Kickass Ln, :city Hipster Town, :state Orygun}, :age 99, :occupation Senior Designer}
*** Records
#+BEGIN_SRC clojure :results output
  ;; Define a record structure
  (defrecord Person [first-name last-name age occupation])

  ;; Positional constructor - generated
  (def kelly (->Person "Kelly" "Keen" 32 "Programmer"))

  ;; Map constructor - generated
  (def kelly (map->Person
	       {:first-name "Kelly"
		:last-name "Keen"
		:age 32
		:occupation "Programmer"}))
  (println kelly)
#+END_SRC

#+RESULTS:
: #four_clojure.core.Person{:first-name Kelly, :last-name Keen, :age 32, :occupation Programmer}
* 4Clojure
** Basic problems
#+BEGIN_SRC clojure :results output
  (println ((fn [x] (str "Hello, " x "!")) "Olivia"))
#+END_SRC

#+RESULTS:
: Hello, Olivia!

*** Recursive function
#+BEGIN_SRC clojure :results output
  (println (dec 5))
  (println ((fn foo [x] (when (> x 0) (conj (foo (dec x)) x))) 99))
#+END_SRC

#+RESULTS:
: 4
: (99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1)

*** -> . This can make code more readable, as an entity gets passed through functions left to right.
#+BEGIN_SRC clojure :results output
  ;; (= (#_blank (sort (rest (reverse [2 5 4 1 3 6]))))
  ;;    (-> [2 5 4 1 3 6] (reverse) (rest) (sort) (#_blank))
  ;;    5)
  (println (reverse [2 5 4 1 3 6]))
  (println (rest (reverse [2 5 4 1 3 6])))
  (println (sort (rest (reverse [2 5 4 1 3 6]))))

  (println (-> [2 5 4 1 3 6] (reverse) (rest) (sort)))
#+END_SRC

#+RESULTS:
: (6 3 1 4 5 2)
: (3 1 4 5 2)
: (1 2 3 4 5)
: (1 2 3 4 5)

*** Loop and Recur . (Recur sends value back through loop.
#+BEGIN_SRC clojure :results output
  (println
   (loop [x 5
	 result []]
    (if (> x 0)
      (recur (dec x) (conj result (+ 2 x)))
      result))
   )
#+END_SRC

#+RESULTS:
: [7 6 5 4 3]

*** ->>
#+BEGIN_SRC clojure :results output
  (println (->> [2 5 4 1 3 6] (drop 2)))
  (println  (->> [2 5 4 1 3 6] (drop 2) (take 3)))
  (println  (->> [2 5 4 1 3 6] (drop 2) (take 3) (map inc)))
#+END_SRC

#+RESULTS:
: (4 1 3 6)
: (4 1 3)
: (5 2 4)
