* Leiningen Basics
** Create a new project with "lein new app $NAME"
** project.clj lists a description, URL, dependencies etc.
** Clojars is to Clojure what NPM is to JS.
** Leiningen also uses Maven Central, which is the wider JVM community.
* Learn Clojure: Syntax Notes
** nil is NULL
** Symbols that start with a leading colon " : " are keywords
** 4 collection types with literal syntax
*** '(1 2 3) list
*** [1 2 3] vector
*** #{1 2 3} set
*** {:a 1, :b 2} map
** Java Evaluation is Source Code (characters) --> Compiler (to bytecode) --> JVM --> Effect!
** Clojure Evaluation is Source Code (characters) --> Reader (to data structures) --> Compiler (to bytecode) --> JVM --> Effect!
** REPL = Read-Eval-Print-Loop
*** Reads an expression to produce Clojure data.
*** Evaluate the date to yield a result.
*** Print the result by converting from data back to characters.
*** Loop back to the beginning.
** In the REPL, "*1" signifies the last result, "*2" the result 2 expressions ago, etc.
** The doc function displays documentation (and returns nil as the result)
*** (doc +) will display the documentation for +
** find-doc returns a search that includes the docstrings of functions themselves
** dir will show a full list of functions in a namespace
** source to see the underlying source
** def is used to save a piece of data for later
*** (def x 88) sets the symbol "x" to 88
** println prints with newline, print without
** Test Problems
#+BEGIN_SRC clojure :results output
(println (+ 1 2))
#+END_SRC
#+RESULTS:
: 3
#+BEGIN_SRC clojure :results output
(println (+ 7654 1234))
#+END_SRC
#+RESULTS:
: 8888
#+BEGIN_SRC clojure :results output
  (println (/ (+ (* 3 4) 7 5) 10))
#+END_SRC
#+RESULTS:
: 12/5
#+BEGIN_SRC clojure :results output
  (require '[clojure.repl :refer :all])
  (println (doc mod))
#+END_SRC
#+RESULTS:
: -------------------------
: clojure.core/mod
: ([num div])
:   Modulus of num and div. Truncates toward negative infinity.
: nil
#+BEGIN_SRC clojure
  (println (find-doc "stack"))
#+END_SRC
#+RESULTS:
: nil
* Learn Clojure: Functions Notes
** Named Functions
*** Functions defined with defn
#+BEGIN_SRC clojure :results output
  (defn love [thing] (str "I love " thing "."))
  (println (love "life"))
#+END_SRC
#+RESULTS:
: I love life.
** Multi-Arity Functions
*** Functions defined with different #'s of parameters (different "arity")
#+BEGIN_SRC clojure :results output
  (defn love
    ([] (str "I love everything!"))
    ([thing] (str "I love " thing "."))
    )
  (println (love))
#+END_SRC
#+RESULTS:
: I love everything!
** Variadic Functions
*** Functions with a variable number of parameters.
*** The variable parameters are collected in a list.
#+BEGIN_SRC clojure :results output
  (defn love [thing & magnitude]
    (println (str "I love " thing " " magnitude ".")))
  (println (love "Portland" "like a fat kid" "loves cake"))
#+END_SRC
#+RESULTS:
: I love Portland ("like a fat kid" "loves cake").
: nil
** Anonymous Functions
*** Created with fn (cannot be refered to later)
#+BEGIN_SRC clojure :results output
  ((fn [thing] (println (str "I love " thing "."))) "Olivia")
#+END_SRC
#+RESULTS:
: I love Olivia.
** Shorter Anonymous Functions
*** Created with #()
*** % is used for a single parameter
*** %1, %2, %3 etc are used for multiple params
*** %& for variadic params
*** Nesting anonymous functions is not allowed
#+BEGIN_SRC clojure :results output
  (println (#(+ 6 %) 9))
  (println (#(+ 6 %1 %2) 9 8 ))
#+END_SRC
#+RESULTS:
: 15
: 23
** Apply
*** For when arguments are stored in a sequence.
*** At least the last argument MUST be a sequence.
#+BEGIN_SRC clojure :results output
  (defn love [thing & magnitude]
      (println (str "I love " thing " " magnitude ".")))
  (def morethwords '("more than words " "can " "say"))
  (println (apply love "Olivia" morethwords))
#+END_SRC
#+RESULTS:
: I love Olivia ("more than words " "can " "say").
: nil
** Lets
*** Binding symbols in a local scope (taking precedence over the outer context).
#+BEGIN_SRC clojure :results output
  (println
  (let [x 1
	y 2]
    (+ x y))
  )
#+END_SRC
#+RESULTS:
: 3
* Learn Clojure: Function Test Problems
** 1) Define a function greet that takes no arguments and prints "Hello". Replace the with the implementation: (defn greet [] )
#+BEGIN_SRC clojure :results output
  (defn greet [] (println "Hello."))
  (greet)
#+END_SRC
#+RESULTS:
: Hello.
** 2) Redefine greet using def, first with the fn special form and then with the #() reader macro.
#+BEGIN_SRC clojure :results output
  (def greet (fn [] (println "Hello.")))
  (greet)
#+END_SRC
#+RESULTS:
: Hello.
** 3) Define a function greeting which:
*** Given no arguments, returns "Hello, World!"
*** Given one argument x, returns "Hello, x!"
*** Given two arguments x and y, returns "x, y!"
#+BEGIN_SRC clojure :results output
  (defn greet
    ([] (println "Hello, World!"))
    ([x] (println "Hello, " (str x "!")))
    ([x y] (println (str x ", " y "!")))
    )
  (greet "Liam")
#+END_SRC

#+RESULTS:
: Hello,  Liam!
** 4) Define a function do-nothing which takes a single argument x and returns it, unchanged.
#+BEGIN_SRC clojure :results output
  (defn do-nothing [x] x)
  (println (do-nothing 2))
#+END_SRC
#+RESULTS:
: 2
** 5) Define a function always-thing which takes any number of arguments, ignores all of them, and returns the number 100.
#+BEGIN_SRC clojure :results output
  (defn always-thing [& x] 100)
  (println (always-thing))
#+END_SRC
#+RESULTS:
: 100
** 6) Define a function make-thingy which takes a single argument x. It should return another function, which takes any number of arguments and always returns x.
#+BEGIN_SRC clojure :results output
  (defn make-thingy [x] (fn [& y] x))
  (println (make-thingy 55))
#+END_SRC
#+RESULTS:
: #function[four-clojure.core/make-thingy/fn--7992]
** 7) Define a function triplicate which takes another function and calls it three times, without any arguments.
#+BEGIN_SRC clojure :results output
(defn triplicate [f] (f) (f) (f))
#+END_SRC
** 8) Define a function opposite which takes a single argument f. It should return another function which takes any number of arguments, applies f on them, and then calls not on the result. The not function in Clojure does logical negation.
#+BEGIN_SRC clojure :results output
  (defn opposite [f]
    (fn [& args] (not (apply f args))))
#+END_SRC
#+RESULTS:

* Learn Clojure: Sequential Collections Notes
** 4 collection types: vectors, lists, sets, and maps.
*** Vectors and lists are ordered
** Vectors: Ordered, Mutable
*** [1 2 3]
*** Use "get" to retrieve an element by index
#+BEGIN_SRC clojure :results output
  (println
   (get ["Olivia" "Liam" "Ryan"] 0)
   )
#+END_SRC
#+RESULTS:
: Olivia
*** Count
#+BEGIN_SRC clojure :results output
  (println
   (count [1 2 3 4 5 6 7])
   )
#+END_SRC
#+RESULTS:
: 7
*** Vector
**** In addition to using [ ], you can create Clojure vectors with
#+BEGIN_SRC clojure :results output
  (println
   (vector 1 2 3)
   )
#+END_SRC
#+RESULTS:
: [1 2 3]
*** Adding elements with conj (conjoin)
#+BEGIN_SRC clojure :results output
  (println
   (conj ["Olivia" "Liam" "Ryan"] "Claudia" "Carolyn" "Scott" "Ellycia" "Steve" "Taylor" "Anthony" "DJ")
   )
#+END_SRC
#+RESULTS:
: [Olivia Liam Ryan Claudia Carolyn Scott Ellycia Steve Taylor Anthony DJ]
*** 
